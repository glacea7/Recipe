{"version":3,"sources":["components/Form.js","components/Main.js","actions/recipeActions.js","components/RecipeForm.js","App.js","serviceWorker.js","reducers/recipeReducer.js","reducers/rootReducer.js","index.js"],"names":["React","Component","Main","className","id","getData","userInput","dispatch","getState","a","url","process","axios","get","result","console","log","recipes","data","type","payload","message","RecipeForm","state","show","onChange","event","target","value","setState","formSubmit","triggerGetData","props","preventDefault","this","size","onSubmit","placeholder","autoComplete","map","recipe","key","title","src","image","likes","connect","recipeData","bindActionCreators","App","isTransition","scale","onScale","jumboPage","to","spy","smooth","offset","duration","alt","width","height","onClick","styles","transform","Boolean","window","location","hostname","match","initialState","recipeReducer","action","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3cf843c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n\tstate = {\r\n\t\tnewArr: [],\r\n\t};\r\n\tincludesIngredients(ingred, event) {\r\n\t\tconst { recipes } = this.props;\r\n\t\tlet newArr = [];\r\n\t\tconst value = event.target.value;\r\n\r\n\t\tif (!value) {\r\n\t\t\trecipes.forEach((recipe) => {\r\n\t\t\t\tif (recipe.ingredients.includes(ingred) === true) {\r\n\t\t\t\t\tnewArr.push({ name: recipe.name, instructions: recipe.instructions });\r\n\t\t\t\t\tconsole.log('newArr:', newArr);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconsole.log('newArr:', newArr);\r\n\t\t\tthis.setState({ newArr: newArr });\r\n\t\t\treturn newArr;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { newArr } = this.state;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-cart4\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t\t\t\t\t<path\r\n\t\t\t\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\t\t\t\td=\"M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l.5 2H5V5H3.14zM6 5v2h2V5H6zm3 0v2h2V5H9zm3 0v2h1.36l.5-2H12zm1.11 3H12v2h.61l.5-2zM11 8H9v2h2V8zM8 8H6v2h2V8zM5 8H3.89l.5 2H5V8zm0 5a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0z\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</svg>{' '}\r\n\t\t\t\t\t\tIngredient's List{' '}\r\n\t\t\t\t\t\t<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-cart4\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t\t\t\t\t<path\r\n\t\t\t\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\t\t\t\td=\"M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l.5 2H5V5H3.14zM6 5v2h2V5H6zm3 0v2h2V5H9zm3 0v2h1.36l.5-2H12zm1.11 3H12v2h.61l.5-2zM11 8H9v2h2V8zM8 8H6v2h2V8zM5 8H3.89l.5 2H5V8zm0 5a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0z\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tPlease select the following ingredients you have. \r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('eggs', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tEggs\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('rice', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tRice\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('cilantro', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tCilantro\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('fish', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tFish\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('lettuce', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tLettuce\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('spam', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tSpam\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('meat', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tMeat\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('chicken', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tChicken\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('oil', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tOil\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('beef', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tBeef\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('ketchup', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tKetchup\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('dough', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tDough\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('sausages', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tSausages\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('Cheese', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tCheese\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('carrot', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tCarrot\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('soysauce', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tSoysauce\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('meatballs', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tMeatballs\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('chicken', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tChicken\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('spinach', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tSpinach\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('shrimp', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tShrimp\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('onion', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tOnion\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('pasta', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tPasta\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-check\" onClick={(event) => this.includesIngredients('tomato sauce', event)}>\r\n\t\t\t\t\t\t<input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" />\r\n\t\t\t\t\t\t<label class=\"form-check-label\" for=\"defaultCheck1\">\r\n\t\t\t\t\t\t\tTomato Sauce\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<strong>Dishes you can make as follows:</strong>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<div className=\"App-container\">\r\n\t\t\t\t\t\t{newArr.map((rcpe) => (\r\n\t\t\t\t\t\t\t<span className=\"instr\">\r\n\t\t\t\t\t\t\t\t<p key={rcpe.name}>{rcpe.name}</p>\r\n\r\n\t\t\t\t\t\t\t\t<p>{rcpe.instructions}</p>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport { Link } from 'react-scroll';\r\nclass Main extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"sectionOneBG\" id=\"main\">\r\n\t\t\t\t\t<div className=\"sectionOneContent\">\r\n\t\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t\t<strong>Find Your Recipe</strong>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"sectionOneContent2\">\r\n\t\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t\t<strong> A simple recipe program </strong>\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<h2>\r\n\t\t\t\t\t\t\t<strong>Easy to use.</strong>\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Main;\r\n","import axios from 'axios';\r\n\r\nexport const getData = (userInput) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\ttry {\r\n\t\t\tconst url = `https://api.spoonacular.com/recipes/findByIngredients?apiKey=${process.env.REACT_APP_FOOD_API_KEY}&ingredients=${userInput}`;\r\n\t\t\tconst result = await axios.get(url);\r\n\t\t\tconsole.log(process.env.REACT_APP_FOOD_API_KEY);\r\n\t\t\tconst recipes = result.data;\r\n\t\t\tconsole.log(result.data);\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'GET_DATA',\r\n\t\t\t\tpayload: { recipes: recipes },\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('ERROR:', error.message);\r\n\t\t}\r\n\t};\r\n};\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getData } from '../actions/recipeActions';\r\n\r\nclass RecipeForm extends React.Component {\r\n\tstate = {\r\n\t\tuserInput: '',\r\n\t\trecipes: [],\r\n\t\tshow: false,\r\n\t};\r\n\tonChange = (event) => {\r\n\t\tlet { userInput } = this.state;\r\n\t\tuserInput = event.target.value;\r\n\t\tconsole.log(userInput);\r\n\t\tthis.setState({ userInput: userInput });\r\n\t};\r\n\tformSubmit = (event) => {\r\n\t\tconst { userInput } = this.state;\r\n\t\tconst { triggerGetData } = this.props;\r\n\t\tevent.preventDefault();\r\n\t\ttriggerGetData(userInput);\r\n\t\tthis.setState({ show: true });\r\n\t};\r\n\r\n\trender() {\r\n\t\tlet { userInput, show } = this.state;\r\n\t\tconst { recipes } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"section2\" id=\"recipe\">\r\n\t\t\t\t<div className=\"section2Content\">\r\n\t\t\t\t\t<div className=\"section2Header\">\r\n\t\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t\t<font size=\"50\">Search Your Recipe</font>\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"section2Search\">\r\n\t\t\t\t\t\t<form onSubmit={this.formSubmit}>\r\n\t\t\t\t\t\t\t<input type=\"text\" placeholder=\"Enter Ingredients\" autoComplete=\"off\" onChange={this.onChange} value={userInput} />\r\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Search\" />\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"displayResults\">\r\n\t\t\t\t\t\t{recipes !== [] &&\r\n\t\t\t\t\t\t\trecipes.map((recipe) => (\r\n\t\t\t\t\t\t\t\t<div className=\"displayResultsBox\">\r\n\t\t\t\t\t\t\t\t\t<p2 key={recipe.id}>\r\n\t\t\t\t\t\t\t\t\t\t{recipe.title}\r\n\t\t\t\t\t\t\t\t\t\t<img src={recipe.image} />\r\n\t\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t\t<strong>💗{recipe.likes} likes</strong>\r\n\t\t\t\t\t\t\t\t\t</p2>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nconst mapStateToProps = (state) => {\r\n\treturn { recipes: state.recipeData.recipes };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn { triggerGetData: bindActionCreators(getData, dispatch) };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeForm);\r\n","import React, { Component } from 'react';\r\nimport Form from './components/Form';\r\nimport './App.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Main from './components/Main';\r\nimport RecipeForm from './components/RecipeForm';\r\nimport { Link, animateScroll as scroll } from 'react-scroll';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\trecipes: [],\r\n\t\tisTransition: false,\r\n\t\tscale: 1,\r\n\t};\r\n\tonScale = () => {\r\n\t\tthis.setState({\r\n\t\t\tscale: this.state.scale > 1 ? 1 : 1.1,\r\n\t\t});\r\n\t};\r\n\tjumboPage = () => {\r\n\t\tconst { isTransition } = this.state;\r\n\t\t{\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"frontPage\">\r\n\t\t\t\t\t\t<h1>Recipe Projectssss</h1>a simple recipe program\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\t// return(\r\n\t\t\t// \t<div >\r\n\t\t\t// <div className=\"mainS\" >\r\n\t\t\t// \t\t<div class=\"front1\">\t<h1><strong>Recipe Projectssssss</strong></h1>\t</div>\r\n\t\t\t// \t\t<section className=\"front2\">\r\n\t\t\t// \t\t<p1 >\r\n\t\t\t// \t\t\tA simple recipe program\r\n\t\t\t// \t\t</p1>\r\n\t\t\t// \t</section>\r\n\t\t\t// \t</div>\r\n\t\t\t// \t\t<div className=\"bootButton\">\r\n\t\t\t// \t\t<p>\r\n\t\t\t// \t\t<Link\r\n\t\t\t// \t\t\tactiveClass=\"active\"\r\n\t\t\t// \t\t\tto=\"recipeForm\"\r\n\t\t\t// \t\t\tspy={true}\r\n\t\t\t// \t\t\tsmooth={true}\r\n\t\t\t// \t\t\toffset={-70}\r\n\t\t\t// \t\t\tduration= {500}\r\n\t\t\t// \t\t> <button type=\"button\" class=\"btn btn-primary btn-lg\">View Program</button> </Link>\r\n\t\t\t// \t\t</p>\r\n\r\n\t\t\t// \t\t</div>\r\n\t\t\t// </div>\r\n\t\t\t// )\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { recipes, isTransition, scale } = this.state;\r\n\t\tconst styles = {\r\n\t\t\ttransition: 'all 1s ease-out',\r\n\t\t};\r\n\t\r\n\t\tconsole.log('recipes', recipes);\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div className=\"banner\">\r\n\t\t\t\t\t<div className=\"bannerCursor\">\r\n\t\t\t\t\t\t<Link to=\"main\" spy={true} smooth={true} offset={0} duration={500}>\r\n\t\t\t\t\t\t\t<img src=\"https://www.svgrepo.com/show/9399/home.svg\" alt=\"home\" width=\"60\" height=\"40\" />\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t{/* <div className=\"arrowUp\">\r\n\t\t\t\t\t\t\t<Link to=\"main\" spy={true} smooth={true} offset={0} duration={500}>\r\n\t\t\t\t\t\t\t\t<img src=\"https://www.svgrepo.com/show/52696/up-arrow.svg\" width=\"30\" />\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</div> */}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"arrowDown\" onClick={this.onScale} styles={{ transform: 'scale(' + this.state.scale + ')' }}>\r\n\t\t\t\t\t<Link to=\"recipe\" spy={true} smooth={true} offset={0} duration={500}>\r\n\t\t\t\t\t\t<img src=\"https://www.svgrepo.com/show/52695/down-arrow.svg\" width=\"30\" />\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Main />\r\n\t\t\t\t<div className=\"filler\">a</div>\r\n\t\t\t\t<RecipeForm />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n\trecipes: [],\r\n};\r\n\r\nfunction recipeReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase 'GET_DATA': {\r\n\t\t\tconst { recipes } = action.payload;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\trecipes: recipes,\r\n\t\t\t};\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\nexport default recipeReducer;\r\n","import recipeReducer from './recipeReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n\trecipeData: recipeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<React.StrictMode>\r\n\t\t\t<App />\r\n\t\t</React.StrictMode>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}